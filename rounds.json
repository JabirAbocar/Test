{
  "openapi": "3.0.1",
  "swagger": "2.0",
  "info": {
    "title": "Roundabout API",
    "description": "API to manage the data of the roundabout applications",
    "version": "2.8.0"
  },
  "servers": [
    {
      "url": "https://uk-terraform-officeenv-0000299-function-dev.azurewebsites.net/function"
    }
  ],
  "paths": {
    "/Manage/Calendar/SetOfficeCalendarCacheHttp": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Build the calendar cache for a week",
        "operationId": "SetOfficeCalendarCacheHttp",
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Config/Menu": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Uploads the cafe menu associated to the offices",
        "operationId": "CreateOrUpdateMenu",
        "requestBody": {
          "description": "Request with the cafe menu and the admin data to execute the action",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/cafeMenuRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "415": {
            "description": "The submited file is not of a recognized format"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Config/Menu/{cafeMenuId}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Removes a given menu",
        "operationId": "RemoveCafeMenu",
        "parameters": [
          {
            "name": "cafeMenuId",
            "in": "path",
            "description": "Menu identifier to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Config/MenuExpired": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Removes the expired cafe menus",
        "operationId": "RemoveExpiredCafeMenus",
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Config/SyncOfficeFloor": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Synchronize office and floor information between post object and database, should not be called by frontend developer",
        "operationId": "SyncOfficeAndFloor",
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Succesfully executed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Notification/{notificationType}": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create Custom Notification",
        "operationId": "CreateCustomNotification",
        "parameters": [
          {
            "name": "notificationType",
            "in": "path",
            "description": "Notification type to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Profile/Remove/{userId}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete user if exists",
        "operationId": "RemoveUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/Profile/AdminOptOut/{userId}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Opt-out user if exists",
        "operationId": "AdminOptOutUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier to be opted-out",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Admin data to execute action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/adminActionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Manage/UserProfile/SyncSAPDataHttp": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Launch synchronization of sap user properties",
        "operationId": "SyncSapDataHttp",
        "parameters": [
          {
            "name": "saveFile",
            "in": "query",
            "description": "If true a file with all sap information will be saved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/AddOrUpdateBooking/{userId}": {
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Create or update a booking",
        "operationId": "AddOrUpdateBooking",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the booking will be created or updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Booking object that will be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addOrUpdateBookingRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/DayRange/{userId}/{startDate}/{endDate}/{seeAll}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days",
        "operationId": "CalendarDayRange",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seeAll",
            "in": "path",
            "description": "If true all information will be shown, otherwise only pinned information or minimized will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/DayRangeWithTeams/{userId}/{startDate}/{endDate}/{seeAll}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days including followed teams booking information",
        "operationId": "CalendarDayRangeWithTeams",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seeAll",
            "in": "path",
            "description": "If true all information will be shown, otherwise only pinned information or minimized will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/V2/DayRangeWithTeams/{userId}/{startDate}/{endDate}/{seeAll}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days including followed teams and shared groups booking information",
        "operationId": "CalendarDayRangeWithTeamsAndSharedGroups",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seeAll",
            "in": "path",
            "description": "If true all information will be shown, otherwise only pinned information or minimized will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/DayRangeByGroup/{userId}/{groupId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days by group",
        "operationId": "CalendarDayRangeByGroup",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/DayRangeBySharedGroup/{userId}/{groupId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days by shared group",
        "operationId": "CalendarDayRangeBySharedGroup",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Shared group identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/DayRangeByTeam/{userId}/{teamId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information for office days by team",
        "operationId": "CalendarDayRangeByTeam",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team identifier for which is retrieved the booking information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the bookings with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedIn/{userId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days",
        "operationId": "CalendarDayRangeCheckedIn",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedIn/V1/{userId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days for v1 api",
        "operationId": "CalendarDayRangeCheckedInV1",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedInByGroup/{userId}/{groupId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days by group",
        "operationId": "CalendarDayRangeCheckedInByGroup",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedInBySharedGroup/{userId}/{groupId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days by shared group",
        "operationId": "CalendarDayRangeCheckedInBySharedGroup",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Shared group identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedInByOffice/{userId}/{officeId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days by office",
        "operationId": "CalendarDayRangeCheckedInByOffice",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "officeId",
            "in": "path",
            "description": "Office identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/CheckedInByTeam/{userId}/{teamId}/{date}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Retreive booking information of checked-in users for office days by team",
        "operationId": "CalendarDayRangeCheckedInByTeam",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team identifier for which is retrieved the checked-in information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the checked-in information with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office day",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDayRangeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Calendar/GetStatus/{userId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Get office booking status for a user",
        "operationId": "GetStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the booking status information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Begining date to retrieve the booking status with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "End date to retrieve the booking status with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking information of office days",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarStatusResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Colleagues/GroupsAndTeams/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "Colleagues"
        ],
        "summary": "Get groups and teams of a specific user",
        "operationId": "GetGroupsAndTeams",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the groups owned and teams followed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups and teams",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of user's groups and teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupAndTeamCollectionResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Colleagues/V2/GroupsAndTeams/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "Colleagues"
        ],
        "summary": "Get groups, teams and shared groups of a specific user",
        "operationId": "GetGroupsAndTeamsV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which retrieve the groups owned, teams followed and shared groups who is part of",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups, teams and shared groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of user's groups, teams and shared groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupAndTeamCollectionResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Colleagues/GroupsAndTeams/{userId}/{skip}/{top}/{onlyPinned}": {
      "get": {
        "tags": [
          "Colleagues"
        ],
        "summary": "Get groups and teams pinned of a specific user",
        "operationId": "GetGroupsAndTeamsOnlyPinned",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the groups owned and teams followed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyPinned",
            "in": "path",
            "description": "If true only pinned groups and teams will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups and teams",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of pinned user's groups and teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupAndTeamCollectionResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Colleagues/V2/GroupsAndTeams/{userId}/{skip}/{top}/{onlyPinned}": {
      "get": {
        "tags": [
          "Colleagues"
        ],
        "summary": "Get groups, teams and shared groups pinned of a specific user",
        "operationId": "GetGroupsAndTeamsOnlyPinnedV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which retrieve the groups owned, the teams followed and the shared groups the user belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyPinned",
            "in": "path",
            "description": "If true only pinned groups and teams will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups, teams and shared groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of pinned user's groups, teams and shared groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupAndTeamCollectionResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Colleagues/GroupsAndTeams/SetPinned": {
      "post": {
        "tags": [
          "Colleagues"
        ],
        "summary": "Updates the pinned status of user's groups and teams",
        "operationId": "UpdatePinnedCollections",
        "requestBody": {
          "description": "List of pinned groups and teams",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pinnedPeopleCollectionRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/GetOfficeFloor": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Retrieves the list of offices and floors",
        "operationId": "GetOfficeFloor",
        "parameters": [
          {
            "name": "sortFloorByName",
            "in": "query",
            "description": "If 1 the floors are orderer by name ascending",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of offices and floors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/officeAndFloorResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/GetConfigFile": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get configuration file",
        "operationId": "GetConfigFile",
        "responses": {
          "200": {
            "description": "The config file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/configFileModelResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/GetFile": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get requested file if it exists",
        "operationId": "GetFile",
        "requestBody": {
          "description": "Information needed to request a file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fileRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/GetAppConfig": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get application configuration details",
        "operationId": "GetAppConfig",
        "responses": {
          "200": {
            "description": "Application configuration details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientApplicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/Menu/AvailableOffices": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the list of offices where menu functionality is available",
        "operationId": "GetMenuAvailableOffices",
        "responses": {
          "200": {
            "description": "List of offices with their menu associated and the valid date ranges for that menu",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/menuAvailableOfficesResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/Menu/{officeId}/{date}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Gets the menu for a given office and a given date",
        "operationId": "GetMenu",
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office identifier for which is retrieved the menu",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date to retrieve the menu with format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu file in pdf format",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/AnchorDay": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Sets new anchor day configuration for the user",
        "operationId": "CreateAnchorDay",
        "requestBody": {
          "description": "Anchor days to be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/anchorDayRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Retrieves anchor days configuration of the user",
        "operationId": "GetAnchorDays",
        "responses": {
          "200": {
            "description": "Collection of anchor days of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/anchorDaysResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/AnchorDay/{anchorDayId}": {
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Deletes specified anchor day",
        "operationId": "RemoveAnchorDay",
        "parameters": [
          {
            "name": "anchorDayId",
            "in": "path",
            "description": "Anchor day identifier to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/AnchorDay/{officeId}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Retrieves anchor day configuration of the user for the specified office",
        "operationId": "GetAnchorDayOffice",
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office identifier for which is retrieved the anchor day configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Anchor day found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/anchorDayResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No anchor day configured for the office"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Config/AnchorDay/Notify/{anchorDayId}": {
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Sets the anchor day as notified",
        "operationId": "NotifyAnchorDay",
        "parameters": [
          {
            "name": "anchorDayId",
            "in": "path",
            "description": "Anchor day identifier to mark as notified",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/CreateOrUpdate": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create or update group",
        "operationId": "CreateOrUpdate",
        "requestBody": {
          "description": "Group object that needs to be created or updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group object created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/UpdateMembers/{groupId}": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Update group members",
        "operationId": "UpdateMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which the members will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group members that needs to be added (true) or removed (false)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateGroupMembersRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/Update/{groupId}": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Update group properties",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group properties to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateGroupRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/Remove/{groupId}": {
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove group",
        "operationId": "RemoveGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Groups/{userId}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get groups of a specific user",
        "operationId": "GetGroups",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the groups will be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of the user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Groups/{userId}/{onlyPinned}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get groups only pinned of a specific user",
        "operationId": "GetGroupsOnlyPinned",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the groups will be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPinned",
            "in": "path",
            "description": "If true only pinned groups will be retrieved",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of the pinned user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/groupResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/SetPinned": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Updates the pinned status of user's groups",
        "operationId": "UpdatePinnedGroups",
        "requestBody": {
          "description": "List of pinned groups",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pinnedGroupsRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/Members/{groupId}/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the group members",
        "operationId": "GetGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which is retrieved the group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the owner of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the group members of a group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMembersResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Group/MembersCount/{groupId}/{userId}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the total number of group members",
        "operationId": "GetGroupMembersCount",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which is retrieved the group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the owner of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of group members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Image/UploadOrUpdate": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Upload or update profile image",
        "operationId": "UploadOrUpdateProfile",
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Image/V2/UploadOrUpdate": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Upload or update profile image",
        "operationId": "UploadOrUpdateProfileV2",
        "requestBody": {
          "description": "Request with the image and the meta-data needs to be added or updated",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/uploadFileRequestV2Object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "415": {
            "description": "The submited file is not of a recognized format"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Image/Remove": {
      "delete": {
        "tags": [
          "Image"
        ],
        "summary": "Remove profile image",
        "operationId": "RemoveProfile",
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Notification/RegisterToken/{userId}/{deviceToken}": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Register device token for a user to receive notifications",
        "operationId": "RegisterToken",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which register the device token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceToken",
            "in": "path",
            "description": "Device token to be registered for notifications",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/Search/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Search people of the organization",
        "operationId": "SearchPeople",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that retrieves the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people you are connected or want to connect to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/Search/{userId}/{skip}/{top}/{nameQuery}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Search people of organization using a filter for name and surname in the query",
        "operationId": "SearchPeopleNameQuery",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that retrieves the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "path",
            "description": "String to filter the given name and surname of the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people you are connected or want to connect to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/V2/Search/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Search people of organization with extended filters",
        "operationId": "SearchPeopleV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that retrieves the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the given name and surname of the people",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceLines",
            "in": "query",
            "description": "Separated by commas string with the service lines identifier to filter the service lines the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departments",
            "in": "query",
            "description": "Separated by commas string with the departments identifier to filter the departments the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdepartments",
            "in": "query",
            "description": "Separated by commas string with the subdepartments lines identifier to filter the subdepartments the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profitCenters",
            "in": "query",
            "description": "Separated by commas string with the profit centers identifier to filter the profit centers the people belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people you are connected or want to connect to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/V2/SearchCount/{userId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Retrieves the total count of found people",
        "operationId": "SearchPeopleCount",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that retrieves the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the given name and surname of the people",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceLines",
            "in": "query",
            "description": "Separated by commas string with the service lines identifier to filter the service lines the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departments",
            "in": "query",
            "description": "Separated by commas string with the departments identifier to filter the departments the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdepartments",
            "in": "query",
            "description": "Separated by commas string with the subdepartments lines identifier to filter the subdepartments the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profitCenters",
            "in": "query",
            "description": "Separated by commas string with the profit centers identifier to filter the profit centers the people belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of people",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeople/{userId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Find the people I am connected",
        "operationId": "MyPeople",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeople/{userId}/{nameQuery}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Find the people I am connected using a filter for name and surname in the query",
        "operationId": "MyPeopleNameQuery",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "path",
            "description": "String to filter the given name and surname of the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeople/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Find the people I am connected paginated",
        "operationId": "MyPeoplePaginated",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeople/{userId}/{skip}/{top}/{nameQuery}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Find the people I am connected paginated using a filter for name and surname in the query",
        "operationId": "MyPeoplePaginatedNameQuery",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "path",
            "description": "String to filter the given name and surname of the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeopleForGroup/{userId}/{groupId}/{skip}/{top}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Find the people I am connected paginated for a specific group",
        "operationId": "MyPeopleForGroupPaginated",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier for which the list of contacts belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the given name and surname of the people",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleGroupResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeopleCount/{userId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Retrieves the total count of the list of the people I am connected",
        "operationId": "MyPeopleCount",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/MyPeopleCount/{userId}/{nameQuery}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Total count of the list of the people I am connected using a filter for name and surname in the query",
        "operationId": "MyPeopleCountNameQuery",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the list of contacts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "path",
            "description": "String to filter the given name and surname of the people",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inApp",
            "in": "query",
            "description": "If false only people still not in the app will be retrieved, otherwise only people already in the app will be retrieved",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of people I am connected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/UpdateMyPeople/{userId}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Update the list of the people I am connected",
        "operationId": "UpdateMyPeople",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the list of contacts will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of all people user ids you would like to follow",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addMyPeopleRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Sucessfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/V2/UpdateMyPeople/{userId}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Update the list of the people I am connected",
        "operationId": "UpdateMyPeopleV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the list of contacts will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of colleagues to be added and removed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addMyPeopleRequestObjectV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Sucessfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/GetUserInfo/{userId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get profile information and office ookings from a specific user",
        "operationId": "GetUserInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the user information",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information and his bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserInfoResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/People/InviteToApp": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Save invitations in the system",
        "operationId": "InviteToApp",
        "requestBody": {
          "description": "List of user ids to be invited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inviteToAppRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of user identifiers of the invited users saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inviteToAppResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Privacy/DataConsentForm": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "Get latest version of the consent",
        "operationId": "GetDataConsentForm",
        "responses": {
          "200": {
            "description": "Latest consent form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getConsentFormResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Privacy/Consent": {
      "post": {
        "tags": [
          "Privacy"
        ],
        "summary": "Add or update a consent of a user",
        "operationId": "Consent",
        "requestBody": {
          "description": "Data consent object needs to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dataConsentRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Privacy/Policy": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "Get latest version of the privacy policy url",
        "operationId": "GetPrivacyPolicy",
        "responses": {
          "200": {
            "description": "Url of the privacy policy file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Profile/Create": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Create a user if it not exist and retrieve its profile",
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oldUserProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Profile/Update/{userId}": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Update profile metadata",
        "operationId": "UpdateProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the profile will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Profile with the properties that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Succesfully executed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Profile/OptOutUser": {
      "delete": {
        "tags": [
          "Profile"
        ],
        "summary": "Opt-out the current logged in user",
        "operationId": "OptOutUser",
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Profile/AnonymousOptOut/{validation}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Opt-out user if exists",
        "operationId": "AnonymousOptOutUser",
        "parameters": [
          {
            "name": "validation",
            "in": "path",
            "description": "Validation string to check that the action can be performed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email of the user to be opted-out",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Html with result of opt-out",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Profile/Teams/AuthStart": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Returns the auth start login page for teams app",
        "operationId": "AnonymousTeamsAuthStart",
        "responses": {
          "200": {
            "description": "Html with result of opt-out",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Profile/Teams/AuthEnd": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Returns the auth end login page for teams app",
        "operationId": "AnonymousTeamsAuthEnd",
        "responses": {
          "200": {
            "description": "Html with result of opt-out",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Office/AddOrUpdate/{userId}": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Add or update office preferences of the user",
        "operationId": "AddOrUpdateOfficePreference",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the office preferences will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object with the primary and secondary office identifiers that needs to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addOrUpdateOfficePreferenceRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/NotificationPreferences/AddOrUpdate/{userId}": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Add or update notification preferences",
        "operationId": "AddOrUpdateNotificationsPreference",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the notification preferences will be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object to enable or disable specific notifications",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addOrUpdateNotificationsPreferenceRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/NotificationPreferences/{userId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get notification preferences of a specific user",
        "operationId": "GetNotificationPreferences",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the notification preferences will be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User notification preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getNotificationsPreferenceResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/OfficePreferences/{userId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Retrieves the office preferences for user",
        "operationId": "GetOfficePreferences",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the office preferences will be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the office preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/officePreferenceResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Profile/Analytics/{userId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get analytics for specified user",
        "operationId": "GetAnalytics",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which the analytics will be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/analyticsResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/SharedGroup/Members/{groupId}/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "SharedGroup"
        ],
        "summary": "Get the group members",
        "operationId": "GetSharedGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Shared group identifier for which retrieve the group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that belongs to the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the group members of a shared group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMembersResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/SharedGroup/MembersCount/{groupId}/{userId}": {
      "get": {
        "tags": [
          "SharedGroup"
        ],
        "summary": "Get the total number of group members",
        "operationId": "GetSharedGroupMembersCount",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Shared group identifier for which retrieve the group members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that belongs to the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of group members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Team/Follow": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Add teams to the followed teams for the user",
        "operationId": "FollowTeams",
        "requestBody": {
          "description": "Teams to be followed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/followTeamRequestObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Team/Unfollow/{teamId}": {
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Remove team from the followed teams of the user",
        "operationId": "UnfollowTeam",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team identifier to unfollow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "200": {
            "description": "Succesfully executed"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "409": {
            "description": "Conflic found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Team/{userId}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get the teams followed by a user",
        "operationId": "GetTeams",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the followed teams",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the teams followed by the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/teamResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/TeamsAvailable/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get the available teams to follow",
        "operationId": "GetAvailableTeams",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier for which is retrieved the available teams",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the name of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceLines",
            "in": "query",
            "description": "Separated by commas string with the service lines identifier to filter the service lines the team belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departments",
            "in": "query",
            "description": "Separated by commas string with the departments identifier to filter the departments the team belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdepartments",
            "in": "query",
            "description": "Separated by commas string with the subdepartments lines identifier to filter the team the people belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profitCenters",
            "in": "query",
            "description": "Separated by commas string with the profit centers identifier to filter the profit centers the team belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the available teams to follow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availableTeamsResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Team/Members/{teamId}/{userId}/{skip}/{top}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get the team members",
        "operationId": "GetTeamMembers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team identifier for which is retrieved the team members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that follows the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "path",
            "description": "Number of items to be skipped in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "path",
            "description": "Number of items to be retrieved in the query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the given name and surname of the people of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the team members of a team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchPeopleResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad input with a message indicating the issue"
          },
          "404": {
            "description": "Object not found in the data store with a message describing the issue"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/Team/MembersCount/{teamId}/{userId}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get the total number of team members",
        "operationId": "GetTeamMembersCount",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team identifier for which is retrieved the team members",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier of the user that follows the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameQuery",
            "in": "query",
            "description": "String to filter the given name and surname of the people of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total count of team members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/countResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/UserProfile/GetServiceLines": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Gets the different service lines of users",
        "operationId": "GetServiceLines",
        "responses": {
          "200": {
            "description": "List of the service lines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/serviceLineResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/UserProfile/GetAggregatedServiceLines": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Gets the different service lines including all children",
        "operationId": "GetAggregatedServiceLines",
        "responses": {
          "200": {
            "description": "List of the agregated service lines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rootAggregatedServiceLineResponseObject"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/UserProfile/GetDepartments": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Gets the different departments of users",
        "operationId": "GetDepartments",
        "parameters": [
          {
            "name": "serviceLines",
            "in": "query",
            "description": "Separated by commas string with the service lines identifier to filter the service lines the departments belong to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the departments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/departmentResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/UserProfile/GetSubdepartments": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Gets the different subdepartments of users",
        "operationId": "GetSubdepartments",
        "parameters": [
          {
            "name": "departments",
            "in": "query",
            "description": "Separated by commas string with the departments identifier to filter the departments the subdepartments belong to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the subdepartments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subdepartmentResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    },
    "/UserProfile/GetProfitCenters": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Gets the different profit centers of users",
        "operationId": "GetProfitCenters",
        "parameters": [
          {
            "name": "subdepartments",
            "in": "query",
            "description": "Separated by commas string with the subdepartments identifier to filter the subdepartments the profit centers belong to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the profit centers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/profitCenterResponseObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Function Key": [ ]
          },
          {
            "JWT Token": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "addMyPeopleRequestObject": {
        "required": [
          "userIdList"
        ],
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user identifiers that will be added as colleagues"
          }
        },
        "example": "{\"userIdList\":[\"00000000-0000-0000-0000-000000000000\",\"00000000-0000-0000-0000-000000000001\"]}"
      },
      "addMyPeopleRequestObjectV2": {
        "required": [
          "userIdList"
        ],
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "List of user identifiers and a boolean indicator to add them as a colleagues (true) or remove them from colleagues (false)"
          }
        },
        "example": "{\"userIdList\":{\"00000000-0000-0000-0000-000000000000\":true,\"00000000-0000-0000-0000-000000000001\":false,\"00000000-0000-0000-0000-000000000002\":false}}"
      },
      "addOrUpdateBookingRequestObject": {
        "required": [
          "bookingDate",
          "officeId"
        ],
        "type": "object",
        "properties": {
          "bookingDate": {
            "minLength": 1,
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "Date of the booking in the format YYYY-MM-dd"
          },
          "isConfirmed": {
            "type": "boolean",
            "description": "If true the booking is set as going, if false is set as maybe and if null as not going"
          },
          "isCheckedIn": {
            "type": "boolean",
            "description": "To indicate if the user has checked-in"
          },
          "officeId": {
            "minLength": 1,
            "type": "string",
            "description": "Office identifier of the booking"
          },
          "floorId": {
            "type": "string",
            "description": "If checked-in the floor identifier must be indicated"
          },
          "deskNumber": {
            "type": "string",
            "description": "If checked-in the desk number can be indicated"
          }
        },
        "example": "{\"bookingDate\":\"2023-03-29\",\"isConfirmed\":true,\"isCheckedIn\":true,\"officeId\":\"officeId\",\"floorId\":\"floorId\",\"deskNumber\":\"023\"}"
      },
      "addOrUpdateNotificationsPreferenceRequestObject": {
        "required": [
          "notificationsConfiguration"
        ],
        "type": "object",
        "properties": {
          "notificationsConfiguration": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "List of notifications and a boolean indicator to enable it (true) or disable (false)"
          }
        },
        "example": "{\"notificationsConfiguration\":{\"MoeCheckIn\":true,\"MoeSeeWhosAround\":false,\"MoePromptToCheck14Days\":false,\"MoeCafeMenu\":true,\"MoeTeamDay\":true}}"
      },
      "addOrUpdateOfficePreferenceRequestObject": {
        "required": [
          "primaryOfficeId"
        ],
        "type": "object",
        "properties": {
          "primaryOfficeId": {
            "minLength": 1,
            "type": "string",
            "description": "Primary office identifier of the user preferences"
          },
          "secondaryOfficeIdList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of other office identifiers set as preferred for the user"
          }
        },
        "example": "{\"primaryOfficeId\":\"officeId\",\"secondaryOfficeIdList\":[\"secondOfficeId\",\"thirdOfficeId\"]}"
      },
      "adminActionRequestObject": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "Password to execute the action"
          }
        },
        "example": "{\"password\":\"fakePassword\"}"
      },
      "aggregatedDepartmentResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/aggregatedSubdepartmentResponseObject"
            }
          }
        }
      },
      "aggregatedProfitCenterResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "aggregatedServiceLineResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/aggregatedDepartmentResponseObject"
            }
          }
        }
      },
      "aggregatedSubdepartmentResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/aggregatedProfitCenterResponseObject"
            }
          }
        }
      },
      "analyticsResponseObject": {
        "type": "object",
        "properties": {
          "totalGroupsCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalTeamsFollowed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"totalGroupsCreated\":3,\"totalTeamsFollowed\":8}"
      },
      "anchorDayRequestObject": {
        "required": [
          "weekDays",
          "officeId"
        ],
        "type": "object",
        "properties": {
          "weekDays": {
            "pattern": "[1-5]",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Week days set as anchor days, the values go from 1 (Monday) to 5 (Friday)"
          },
          "officeId": {
            "minLength": 1,
            "type": "string",
            "description": "Office identifier where the anchor will be set"
          }
        },
        "example": "{\"weekDays\":[3,4],\"officeId\":\"officeId\"}"
      },
      "anchorDayResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "officeId": {
            "type": "string"
          },
          "officeName": {
            "type": "string"
          },
          "weekDays": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Days of the week set as anchor days. 1 represents Monday and 5 Friday."
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time"
          },
          "isNotified": {
            "type": "boolean",
            "description": "Indicates if the anchor day has been notified"
          }
        },
        "example": "{\"id\":\"00000000-0000-0000-0000-000000000000\",\"officeId\":\"officeId\",\"officeName\":\"My Office\",\"weekDays\":[3,4],\"startDate\":\"2023-11-09T10:49:52.9180985+00:00\",\"finishDate\":\"2024-02-09T10:49:52.9181019+00:00\",\"isNotified\":false}"
      },
      "anchorDaysResponseObject": {
        "type": "object",
        "properties": {
          "anchorDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/anchorDayResponseObject"
            },
            "description": "List of the anchor days"
          }
        },
        "example": "{\"anchorDays\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"officeId\":\"officeId\",\"officeName\":\"My Office\",\"weekDays\":[3,4],\"startDate\":\"2023-11-09T10:49:52.8986518+00:00\",\"finishDate\":\"2024-02-09T10:49:52.898655+00:00\",\"isNotified\":false}]}"
      },
      "availableTeamResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamLevel": {
            "type": "string",
            "description": "Level of the team. Can be SubdepartmentLevel or DepartmentLevel"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          },
          "serviceLineId": {
            "type": "string"
          },
          "serviceLine": {
            "type": "string"
          },
          "isAlreadyFollowed": {
            "type": "boolean"
          }
        }
      },
      "availableTeamsResponseObject": {
        "type": "object",
        "properties": {
          "availableTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableTeamResponseObject"
            }
          }
        },
        "example": "{\"availableTeams\":[{\"id\":\"departmentId\",\"name\":\"My Department\",\"teamLevel\":\"DepartmentLevel\",\"peopleCount\":155,\"serviceLineId\":\"serviceLineId\",\"serviceLine\":\"My Service Line\",\"isAlreadyFollowed\":true},{\"id\":\"otherDepartmentId\",\"name\":\"My Other Department\",\"teamLevel\":\"DepartmentLevel\",\"peopleCount\":155,\"serviceLineId\":\"serviceLineId\",\"serviceLine\":\"My Service Line\",\"isAlreadyFollowed\":false}]}"
      },
      "cafeMenuRequestObject": {
        "required": [
          "officeMenuId",
          "startDate",
          "finishDate",
          "fileName",
          "file",
          "password"
        ],
        "type": "object",
        "properties": {
          "officeMenuId": {
            "minLength": 1,
            "type": "string",
            "description": "Office menu identifier where the cafe menu will be related to"
          },
          "startDate": {
            "minLength": 1,
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "Date from which the menu will be valid in the format YYYY-MM-dd"
          },
          "finishDate": {
            "minLength": 1,
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "Date until the menu will be valid in the format YYYY-MM-dd"
          },
          "fileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the menu file"
          },
          "file": {
            "minLength": 1,
            "type": "string",
            "description": "Menu file",
            "format": "binary"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "Password to execute the action"
          }
        },
        "example": "{\"officeMenuId\":\"00000000-0000-0000-0000-000000000000\",\"startDate\":\"2023-06-12\",\"finishDate\":\"2023-06-17\",\"fileName\":\"Weekly Menu - 12 June.pdf\",\"file\":\"\",\"password\":\"fakePassword\"}"
      },
      "calendarDay": {
        "type": "object",
        "properties": {
          "groupDayBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupDayBooking"
            }
          },
          "date": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          },
          "isCheckedIn": {
            "type": "boolean",
            "nullable": true
          },
          "officeId": {
            "type": "string"
          },
          "floorId": {
            "type": "string"
          },
          "deskNumber": {
            "type": "string"
          },
          "officeDayBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/officeDayBooking"
            }
          }
        }
      },
      "calendarDayRangeResponseModel": {
        "type": "object",
        "properties": {
          "calendarDayList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/calendarDay"
            }
          }
        },
        "example": "{\"calendarDayList\":[{\"groupDayBookings\":[{\"groupId\":\"00000000-0000-0000-0000-000000000000\",\"groupName\":\"My Group\",\"groupColor\":\"blue\",\"serviceLineId\":null,\"people\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":\"going\",\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}],\"officeDayBookings\":[{\"people\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":\"going\",\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}],\"officeName\":\"My Office\",\"officeId\":\"officeId\",\"officeCity\":\"London\",\"isPrimary\":true,\"totalCountMyPeopleGoing\":1,\"totalCountMyPeopleMaybe\":0,\"totalCountMyPeopleCheckedIn\":0}],\"totalCountGroupMembers\":5,\"totalCountGroupMembersGoing\":1,\"totalCountGroupMembersMaybe\":0,\"totalCountGroupMembersCheckedIn\":0,\"groupGeneralStatus\":\"going\",\"groupType\":1}],\"date\":\"2023-06-12\",\"status\":\"going\",\"isCheckedIn\":false,\"officeId\":\"officeId\",\"floorId\":null,\"deskNumber\":null,\"officeDayBookings\":[{\"people\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":\"going\",\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}],\"officeName\":\"My Office\",\"officeId\":\"officeId\",\"officeCity\":\"London\",\"isPrimary\":true,\"totalCountMyPeopleGoing\":1,\"totalCountMyPeopleMaybe\":0,\"totalCountMyPeopleCheckedIn\":0}]}]}"
      },
      "calendarStatusResponseObject": {
        "type": "object",
        "properties": {
          "statusList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dailyStatus"
            }
          }
        },
        "example": "{\"statusList\":[{\"date\":\"2023-03-29\",\"status\":\"going\"},{\"date\":\"2023-03-30\",\"status\":\"maybe\"}]}"
      },
      "clientApplicationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currentVersion": {
            "type": "string"
          },
          "minumunVersion": {
            "type": "string"
          },
          "datePublished": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "forceUpdateMinumun": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "example": "{\"id\":\"2023-03-29\",\"name\":\"Roundabout\",\"currentVersion\":\"2.3\",\"minumunVersion\":null,\"datePublished\":\"2023-11-09T10:49:52.8697411+00:00\",\"forceUpdateMinumun\":false,\"message\":null}"
      },
      "configFileModelResponseObject": {
        "type": "object",
        "properties": {
          "consent": {
            "$ref": "#/components/schemas/consent"
          }
        },
        "example": "{\"consent\":{\"versionNumber\":\"2.3\"}}"
      },
      "consent": {
        "type": "object",
        "properties": {
          "versionNumber": {
            "type": "string"
          }
        }
      },
      "countResponseObject": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"count\":45}"
      },
      "dailyStatus": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date in the booking with the format YYYY-MM-dd"
          },
          "status": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          }
        }
      },
      "dataConsentRequestObject": {
        "required": [
          "version",
          "consented"
        ],
        "type": "object",
        "properties": {
          "version": {
            "minLength": 1,
            "type": "string",
            "description": "Version to be consented"
          },
          "consented": {
            "type": "boolean",
            "description": "Consented or not consented"
          }
        },
        "example": "{\"version\":\"2.3\",\"consented\":true}"
      },
      "departmentResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "serviceLineId": {
            "type": "string"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"id\":\"departmentId\",\"description\":\"My Department\",\"serviceLineId\":\"serviceLineId\",\"peopleCount\":55}"
      },
      "fileRequestObject": {
        "required": [
          "folder",
          "path"
        ],
        "type": "object",
        "properties": {
          "folder": {
            "minLength": 1,
            "type": "string",
            "description": "Base folder where the file is located"
          },
          "path": {
            "minLength": 1,
            "type": "string",
            "description": "Path from the folder where the file is located"
          }
        },
        "example": "{\"folder\":\"exampleFolder\",\"path\":\"examplePath\"}"
      },
      "floorResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "followTeamObject": {
        "required": [
          "teamLevel",
          "id"
        ],
        "type": "object",
        "properties": {
          "teamLevel": {
            "minLength": 1,
            "pattern": "\\b(SubdepartmentLevel|DepartmentLevel)\\b",
            "type": "string",
            "description": "Level ot the selected team. Can be SubdepartmentLevel or DepartmentLevel."
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "Identifier of the team"
          }
        }
      },
      "followTeamRequestObject": {
        "required": [
          "followTeams"
        ],
        "type": "object",
        "properties": {
          "followTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/followTeamObject"
            },
            "description": "List of teams to be followed"
          }
        },
        "example": "{\"followTeams\":[{\"teamLevel\":\"DepartmentLevel\",\"id\":\"deparmtentId\"},{\"teamLevel\":\"DepartmentLevel\",\"id\":\"otherDeparmtentId\"},{\"teamLevel\":\"SubdepartmentLevel\",\"id\":\"subDeparmtentId\"}]}"
      },
      "getConsentFormResponseObject": {
        "type": "object",
        "properties": {
          "consentUrl": {
            "type": "string"
          },
          "consentVersion": {
            "type": "string"
          }
        },
        "example": "{\"consentUrl\":\"https://fakeurlroundabout.com\",\"consentVersion\":\"2.3\"}"
      },
      "getNotificationsPreferenceResponseObject": {
        "type": "object",
        "properties": {
          "notificationsConfiguration": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        },
        "example": "{\"notificationsConfiguration\":{\"MoeCheckIn\":true,\"MoeSeeWhosAround\":false,\"MoePromptToCheck14Days\":false,\"MoeCafeMenu\":true,\"MoeTeamDay\":true}}"
      },
      "getUserInfoResponseObject": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/oldUserDto"
          },
          "officeBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userBooking"
            }
          }
        },
        "example": "{\"profile\":{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":null,\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null},\"officeBookings\":[{\"bookingDate\":\"2023-03-29\",\"officeName\":\"My Office\",\"status\":\"going\"},{\"bookingDate\":\"2023-03-30\",\"officeName\":\"My Office\",\"status\":\"maybe\"}]}"
      },
      "groupAndTeamCollectionResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the group or the team"
          },
          "name": {
            "type": "string"
          },
          "isPinned": {
            "type": "boolean"
          },
          "color": {
            "type": "string",
            "description": "Only set if it is a group"
          },
          "level": {
            "type": "string",
            "description": "Only set if it is a team"
          },
          "serviceLineId": {
            "type": "string",
            "description": "Only set if it is a team. Can be DepartmentLevel or SubdepartmentLevel"
          },
          "memberCount": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer",
            "description": "Indicates if it is a private group (1), shared group (2) or team (3)",
            "format": "int32"
          },
          "isOwner": {
            "type": "boolean",
            "description": "Indicates if current user is the owner of the object"
          },
          "dateAdded": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": "{\"id\":\"00000000-0000-0000-0000-000000000000\",\"name\":\"My Team\",\"isPinned\":true,\"color\":null,\"level\":\"DepartmentLevel\",\"serviceLineId\":\"serviceLineId\",\"memberCount\":55,\"type\":3,\"isOwner\":true,\"dateAdded\":\"2023-11-09T10:49:52.8498804+00:00\"}"
      },
      "groupDayBooking": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Identifier or the user's group or the team user is following"
          },
          "groupName": {
            "type": "string"
          },
          "groupColor": {
            "type": "string",
            "description": "Only set if the object is a group"
          },
          "serviceLineId": {
            "type": "string",
            "description": "Only set if the object is a team"
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/oldUserDto"
            }
          },
          "officeDayBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/officeDayBooking"
            }
          },
          "totalCountGroupMembers": {
            "type": "integer",
            "format": "int32"
          },
          "totalCountGroupMembersGoing": {
            "type": "integer",
            "format": "int32"
          },
          "totalCountGroupMembersMaybe": {
            "type": "integer",
            "format": "int32"
          },
          "totalCountGroupMembersCheckedIn": {
            "type": "integer",
            "format": "int32"
          },
          "groupGeneralStatus": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          },
          "groupType": {
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer",
            "description": "Indicates if it is a private group (1), shared group (2) or team (3)",
            "format": "int32"
          }
        }
      },
      "groupRequestObject": {
        "required": [
          "name",
          "color"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the group if we want to update an existing group, otherwise leave it empty."
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the group to be created or updated"
          },
          "color": {
            "minLength": 1,
            "type": "string",
            "description": "Color of the group to be created or updated"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user identifiers that will be be members of the group"
          }
        },
        "example": "{\"id\":\"00000000 - 0000 - 0000 - 0000 - 000000000000\",\"name\":\"My Group\",\"color\":\"blue\",\"members\":[\"00000000-0000-0000-0000-000000000000\",\"00000000-0000-0000-0000-000000000001\",\"00000000-0000-0000-0000-000000000002\"]}"
      },
      "groupResponseObject": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/oldUserDto"
            }
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isPinned": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          },
          "type": {
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "isOwner": {
            "type": "boolean"
          }
        },
        "example": "{\"members\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":null,\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null},{\"id\":\"00000000-0000-0000-0000-000000000001\",\"givenName\":\"John\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"otherfakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":null,\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}],\"id\":\"00000000-0000-0000-0000-000000000000\",\"name\":\"My Group\",\"isPinned\":false,\"color\":\"blue\",\"type\":1,\"isOwner\":true}"
      },
      "inviteToAppRequestObject": {
        "required": [
          "userIds"
        ],
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user identifiers that will be be tracked as invited"
          }
        },
        "example": "{\"userIds\":[\"00000000-0000-0000-0000-000000000000\",\"00000000-0000-0000-0000-000000000001\"]}"
      },
      "inviteToAppResponseObject": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        },
        "example": "{\"userIdList\":{\"00000000-0000-0000-0000-000000000000\":true,\"00000000-0000-0000-0000-000000000001\":false}}"
      },
      "menuAvailableOfficesResponseObject": {
        "type": "object",
        "properties": {
          "officeId": {
            "type": "string"
          },
          "officeName": {
            "type": "string"
          },
          "menuId": {
            "type": "string"
          },
          "menuName": {
            "type": "string"
          },
          "dateRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/menuDateRange"
            }
          }
        },
        "example": "{\"officeId\":\"officeId\",\"officeName\":\"My Office\",\"menuId\":\"00000000-0000-0000-0000-000000000000\",\"menuName\":\"My Office Menu\",\"dateRanges\":[{\"startDate\":\"2023-11-09T10:49:52.8799984+00:00\",\"finishDate\":\"2023-11-14T10:49:52.8800021+00:00\"}]}"
      },
      "menuDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "finishDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "officeAndFloorResponseObject": {
        "type": "object",
        "properties": {
          "offices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/officeResponseObject"
            }
          }
        },
        "example": "{\"offices\":[{\"id\":\"officeId\",\"name\":\"My Office\",\"cityName\":\"London\",\"countryName\":\"UK\",\"regionName\":\"Region\",\"floors\":[{\"id\":\"floorId\",\"name\":\"My First Floor\"},{\"id\":\"otherFloorId\",\"name\":\"My Second Floor\"}]}]}"
      },
      "officeDayBooking": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/oldUserDto"
            }
          },
          "officeName": {
            "type": "string"
          },
          "officeId": {
            "type": "string"
          },
          "officeCity": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          },
          "totalCountMyPeopleGoing": {
            "type": "integer",
            "format": "int32"
          },
          "totalCountMyPeopleMaybe": {
            "type": "integer",
            "format": "int32"
          },
          "totalCountMyPeopleCheckedIn": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "officePreferenceResponse": {
        "type": "object",
        "properties": {
          "officeName": {
            "type": "string"
          },
          "officeId": {
            "type": "string"
          },
          "officeCity": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          }
        }
      },
      "officePreferenceResponseObject": {
        "type": "object",
        "properties": {
          "officePreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/officePreferenceResponse"
            }
          }
        },
        "example": "{\"officePreferences\":[{\"officeName\":\"My Office\",\"officeId\":\"officeId\",\"officeCity\":\"London\",\"isPrimary\":true},{\"officeName\":\"Other Office\",\"officeId\":\"otherOfficeId\",\"officeCity\":\"London\",\"isPrimary\":false}]}"
      },
      "officeResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cityName": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "regionName": {
            "type": "string"
          },
          "floors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/floorResponseObject"
            }
          }
        }
      },
      "oldUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          },
          "floorName": {
            "type": "string"
          },
          "deskNumber": {
            "type": "string"
          },
          "checkedInTime": {
            "type": "string"
          },
          "internalStatus": {
            "type": "string",
            "description": "Can be NotColleague_InApp, NotColleague_Invitable, NotColleague_Discovered, Colleague_InApp, Colleague_Pending"
          }
        },
        "example": "{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":null,\"status\":\"going\",\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}"
      },
      "oldUserProfileDto": {
        "type": "object",
        "properties": {
          "hasAnyColleagues": {
            "type": "boolean"
          },
          "sharedGroupNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          },
          "floorName": {
            "type": "string"
          },
          "deskNumber": {
            "type": "string"
          },
          "checkedInTime": {
            "type": "string"
          },
          "internalStatus": {
            "type": "string",
            "description": "Can be NotColleague_InApp, NotColleague_Invitable, NotColleague_Discovered, Colleague_InApp, Colleague_Pending"
          }
        }
      },
      "pinnedGroupsRequestObject": {
        "required": [
          "pinnedGroupIds"
        ],
        "type": "object",
        "properties": {
          "pinnedGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of group identifiers to be set as pinned"
          }
        },
        "example": "{\"pinnedGroupIds\":[\"00000000-0000-0000-0000-000000000000\",\"00000000-0000-0000-0000-000000000001\"]}"
      },
      "pinnedPeopleCollectionRequestObject": {
        "type": "object",
        "properties": {
          "pinnedGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of group identifiers to be set as pinned"
          },
          "pinnedTeamIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of team identifiers to be set as pinned"
          },
          "pinnedSharedGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of shared group identifiers to be set as pinned"
          }
        },
        "example": "{\"pinnedGroupIds\":[\"00000000-0000-0000-0000-000000000000\",\"00000000-0000-0000-0000-000000000001\"],\"pinnedTeamIds\":[\"00000000-0000-0000-0000-000000000000\"],\"pinnedSharedGroupIds\":[\"00000000-0000-0000-0000-000000000000\"]}"
      },
      "profitCenterResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subdepartmentId": {
            "type": "string"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"id\":\"profitCenterId\",\"description\":\"My Profit Center\",\"subdepartmentId\":\"subdepartmentId\",\"peopleCount\":35}"
      },
      "rootAggregatedServiceLineResponseObject": {
        "type": "object",
        "properties": {
          "serviceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/aggregatedServiceLineResponseObject"
            }
          }
        },
        "example": "{\"serviceLines\":[{\"id\":\"serviceLineId\",\"description\":\"My Service Line\",\"children\":[{\"id\":\"departmentId\",\"description\":\"My Department\",\"children\":[{\"id\":\"subdepartmentId\",\"description\":\"My Subdepartment\",\"children\":[]}]}]}]}"
      },
      "searchMembersResponseObject": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/oldUserDto"
            }
          }
        },
        "example": "{\"people\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":\"https://fakeurlroundabout.com/image/pic\",\"status\":null,\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":null}]}"
      },
      "searchPeopleGroupResponseObject": {
        "type": "object",
        "properties": {
          "colleaguesPeople": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userColleagueGroupDto"
            }
          }
        },
        "example": "{\"colleaguesPeople\":[{\"isInGroup\":true,\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"sapId\":null,\"imageURL\":\"https://fakeurlroundabout.com/image/pic\"}]}"
      },
      "searchPeopleResponseObject": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/oldUserDto"
            }
          }
        },
        "example": "{\"people\":[{\"id\":\"00000000-0000-0000-0000-000000000000\",\"givenName\":\"Peter\",\"surname\":\"Smith\",\"mobilePhone\":null,\"mail\":\"fakeemail@deloitte.uk.com\",\"teamId\":null,\"imageURL\":\"https://fakeurlroundabout.com/image/pic\",\"status\":null,\"floorName\":null,\"deskNumber\":null,\"checkedInTime\":null,\"internalStatus\":\"NotColleague_InApp\"}]}"
      },
      "serviceLineResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"id\":\"serviceLineId\",\"description\":\"My Service Line\",\"peopleCount\":120}"
      },
      "subdepartmentResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "departmentId": {
            "type": "string"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "example": "{\"id\":\"subdepartmentId\",\"description\":\"My Subdepartment\",\"departmentId\":\"departmentId\",\"peopleCount\":22}"
      },
      "teamResponseObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "serviceLineId": {
            "type": "string"
          },
          "departmentId": {
            "type": "string"
          },
          "subdepartmentId": {
            "type": "string"
          },
          "profitCenterId": {
            "type": "string"
          },
          "teamServiceLineId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "peopleCount": {
            "type": "integer",
            "format": "int32"
          },
          "pinned": {
            "type": "boolean"
          }
        },
        "example": "{\"id\":\"00000000-0000-0000-0000-000000000000\",\"serviceLineId\":null,\"departmentId\":\"departmentid\",\"subdepartmentId\":null,\"profitCenterId\":null,\"teamServiceLineId\":\"serviceLineId\",\"name\":\"My Department\",\"peopleCount\":45,\"pinned\":false}"
      },
      "updateGroupMembersRequestObject": {
        "required": [
          "userIdList"
        ],
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "List of user identifiers with an indicator to add it as member of the group (true) or to remove them from the group (false)"
          }
        },
        "example": "{\"userIdList\":{\"00000000-0000-0000-0000-000000000000\":true,\"00000000-0000-0000-0000-000000000001\":false,\"00000000-0000-0000-0000-000000000002\":false}}"
      },
      "updateGroupRequestObject": {
        "required": [
          "name",
          "color"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the group to be updated"
          },
          "color": {
            "minLength": 1,
            "type": "string",
            "description": "Color of the group to be updated"
          }
        },
        "example": "{\"name\":\"My Group Updated\",\"color\":\"pink\"}"
      },
      "updateUserRequestObject": {
        "type": "object",
        "properties": {
          "givenName": {
            "type": "string",
            "description": "Not in use"
          },
          "surname": {
            "type": "string",
            "description": "Not in use"
          },
          "mail": {
            "type": "string",
            "description": "Not in use"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Phone of the user to be updated"
          },
          "teamID": {
            "type": "string",
            "description": "Not in use"
          }
        },
        "example": "{\"givenName\":null,\"surname\":null,\"mail\":null,\"mobilePhone\":\"7975777666\",\"teamID\":null}"
      },
      "uploadFileRequestV2Object": {
        "required": [
          "profilePhoto",
          "fileName",
          "file"
        ],
        "type": "object",
        "properties": {
          "profilePhoto": {
            "minLength": 1,
            "type": "string",
            "description": "Not in use"
          },
          "fileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the file to be uploaded"
          },
          "file": {
            "minLength": 1,
            "type": "string",
            "description": "File to be uploaded",
            "format": "binary"
          }
        },
        "example": "{\"profilePhoto\":null,\"fileName\":\"MoE\",\"file\":\"\"}"
      },
      "userBooking": {
        "type": "object",
        "properties": {
          "bookingDate": {
            "type": "string"
          },
          "officeName": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Can be going, maybe or notgoing"
          }
        }
      },
      "userColleagueGroupDto": {
        "type": "object",
        "properties": {
          "isInGroup": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "sapId": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Function Key": {
        "type": "apiKey",
        "name": "x-functions-key",
        "in": "header"
      },
      "JWT Token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
